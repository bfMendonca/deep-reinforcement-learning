# -*- coding: utf-8 -*-
import numpy as np
import random
from collections import namedtuple, deque

from model import QNetwork, DuelingQNetwork

import torch
import torch.nn.functional as F
import torch.optim as optim

BUFFER_SIZE = int(1e5)  # replay buffer size
BATCH_SIZE = 128         # minibatch size
GAMMA = 0.99            # discount factor
TAU = 1e-3              # for soft update of target parameters
LR = 5e-4               # learning rate 
UPDATE_EVERY = 4        # how often to update the network

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

class Agent():
    """Interacts with and learns from the environment."""

    def __init__(self, state_size, action_size, seed, ddqn=False, dueling=False, init_td=1e-5, prioritize_weight=0.0, beta_scheduler=None ):
        """Initialize an Agent object.
        
        Params
        ======
            state_size (int): dimension of each state
            action_size (int): dimension of each action
            seed (int): random seed
        """
        self.state_size = state_size
        self.action_size = action_size
        self.seed = random.seed(seed)

        # Q-Network
        
        if not dueling:        
            self.qnetwork_local = QNetwork(state_size, action_size, seed).to(device)
            self.qnetwork_target = QNetwork(state_size, action_size, seed).to(device)
        
        
        elif dueling:
            self.qnetwork_local = DuelingQNetwork(state_size, action_size, seed).to(device)
            self.qnetwork_target = DuelingQNetwork(state_size, action_size, seed).to(device)
        
        self.optimizer = optim.Adam(self.qnetwork_local.parameters(), lr=LR)

        
        # Replay memory
        if( prioritize_weight != 0.0 ):
            self.memory = PrioritizedReplayBuffer(action_size, BUFFER_SIZE, BATCH_SIZE, seed, prioritize_weight, beta_scheduler )
            
            self.init_td = init_td
            self.prioritize_weight = prioritize_weight

        else:
            self.prioritize_weight = 0.0
            
            self.memory = ReplayBuffer(action_size, BUFFER_SIZE, BATCH_SIZE, seed )
        
        self.init_td = init_td
        
        # Initialize time step (for updating every  steps)
        self.t_step = 0
        
        self.ddqn = ddqn
    
        
    def step(self, state, action, reward, next_state, done):
        # Save experience in replay memory
        self.memory.add(state, action, reward, next_state, done )
        
        # Learn every UPDATE_EVERY time steps.
        self.t_step = (self.t_step + 1) % UPDATE_EVERY
        if self.t_step == 0:
            # If enough samples are available in memory, get random subset and learn
            if len(self.memory) > BATCH_SIZE:
                experiences = self.memory.sample()
                self.learn(experiences, GAMMA)
                
    def eps_greedy_act(self, states, q_network):
        
        #Put in eval mode
        q_network.eval()
        with torch.no_grad():
            action_values = q_network(states)
        q_network.train()

        # Epsilon-greedy action selection
        return np.argmax(action_values.cpu().data.numpy())
                
        
    def act(self, state, eps=0.):
        """Returns actions for given state as per current policy.
        
        Params
        ======
            state (array_like): current state
            eps (float): epsilon, for epsilon-greedy action selection
        """
        state = torch.from_numpy(state).float().unsqueeze(0).to(device)

        # Epsilon-greedy action selection
        if random.random() > eps:
            return self.eps_greedy_act( state, self.qnetwork_local )
        else:
            return random.choice(np.arange(self.action_size))

        
    def learn(self, experiences, gamma):
        """Update value parameters using given batch of experience tuples.

        Params
        ======
            experiences (Tuple[torch.Tensor]): tuple of (s, a, r, s', done) tuples 
            gamma (float): discount factor
        """
        indexes, states, actions, rewards, next_states, dones, update_weights = experiences
        
        with torch.no_grad():
        
            if( self.ddqn ):
                # Get the action values from local model (qnetwork_local)
                #a = self.eps_greedy_act( next_states, self.qnetwork_local )
                next_rewards = self.qnetwork_local(next_states)
                next_actions = next_rewards.max(dim=1, keepdim=True)[1]


                #Evaluate the QValues using the last froozen parameters (qnetwork_target) using the action
                #generated by the changing network (qnetwork_local)
                Q_targets_next = self.qnetwork_target(next_states).gather(1, next_actions) 

            else:
                # Get max predicted Q values (for next states) from target model
                Q_targets_next = self.qnetwork_target(next_states).max(1)[0].unsqueeze(1)
                
        
            # Compute Q targets for current states 
            Q_targets = ( rewards + (gamma * Q_targets_next * (1 - dones)) )

        
        # Get expected Q values from local model
        Q_expected = self.qnetwork_local(states).gather(1, actions)
        

        if( self.prioritize_weight != 0.0 ):                    
            # Compute loss
            Q_targets.sub_(Q_expected)
            Q_targets.pow_(2)
            
            with torch.no_grad():
                errors = Q_targets.detach()
                errors.pow_(0.5)
                
                priorities = errors.cpu().numpy().flatten()
                
                
                for i in range( len( priorities ) ): 
                    idx = indexes[i]
                    self.memory.update_prob( idx, priorities[i] + self.init_td )
            
            Q_targets.mul_( update_weights )
            loss = Q_targets.mean()
            
            
            
        else:
            loss = F.mse_loss( Q_expected,  Q_targets )
        
        # Minimize the loss
        self.optimizer.zero_grad()
        loss.backward()
        self.optimizer.step()
        
        # ------------------- update target network ------------------- #
        self.soft_update(self.qnetwork_local, self.qnetwork_target, TAU)                     
        
            
        
    def soft_update(self, local_model, target_model, tau):
        """Soft update model parameters.
        θ_target = τ*θ_local + (1 - τ)*θ_target

        Params
        ======
            local_model (PyTorch model): weights will be copied from
            target_model (PyTorch model): weights will be copied to
            tau (float): interpolation parameter 
        """
        for target_param, local_param in zip(target_model.parameters(), local_model.parameters()):
            target_param.data.copy_(tau*local_param.data + (1.0-tau)*target_param.data)

class PrioritizedReplayBuffer:
    
    """Fixed-size buffer to store experience tuples."""

    def __init__(self, action_size, buffer_size, batch_size, seed, prioritize_weight=0.0, beta_scheduler=1.1 ):
        """Initialize a ReplayBuffer object.

        Params
        ======
            action_size (int): dimension of each action
            buffer_size (int): maximum size of buffer
            batch_size (int): size of each training batch
            seed (int): random seed
        """
        self.action_size = action_size
        self.memory = deque(maxlen=buffer_size)  
        self.probs = deque( maxlen=buffer_size)
        self.batch_size = batch_size
        self.experience = namedtuple("Experience", field_names=["state", "action", "reward", "next_state", "done"])
        self.seed = random.seed(seed)
        
        self.alpha = prioritize_weight
        self.beta = 1e-3
        self.beta_scheduler = beta_scheduler
        self.n_counter = 0
    
    def add(self, state, action, reward, next_state, done ):
        """Add a new experience to memory."""
        e = self.experience(state, action, reward, next_state, done )
        self.memory.append(e)
        
        if len( self.probs ) == 0:
            self.probs.append( 1.0 )
        else:
            self.probs.append( max( self.probs ) )
        
    
    def update_prob( self, idx, new_prob ):
        self.probs[idx] = new_prob
        
        
    def sample(self):
        """Randomly sample a batch of experiences from memory."""
        
        indexes = np.array( range( len(self.memory) ) )        
        probs = np.array( self.probs )
        
        samp_probs = probs ** self.alpha / np.sum( probs ** self.alpha )
        
        indexes = np.random.choice( indexes, self.batch_size, p = samp_probs, replace=False )
        
        self.n_counter += 1
        self.beta = self.beta_scheduler( self.n_counter )
        
        update_weights = np.power( len( self.memory ) * probs,  -self.beta )
        
        normalized_weights = update_weights / update_weights.max()
        
        
        update_weights = torch.from_numpy(np.vstack( normalized_weights ).astype(np.float)).float().to(device)
        
        states = []
        actions = []
        rewards = []
        next_states = []
        dones = []
        weights = []
        
        for idx in indexes:
            states.append( self.memory[idx].state )
            actions.append( self.memory[idx].action )
            rewards.append( self.memory[idx].reward )
            next_states.append( self.memory[idx].next_state )
            dones.append( self.memory[idx].done )
            weights.append( normalized_weights[idx] )
        
        
        states = torch.from_numpy(np.vstack( states ) ).float().to(device)
        actions = torch.from_numpy(np.vstack( actions ) ).long().to(device)
        rewards = torch.from_numpy(np.vstack( rewards ) ).float().to(device)
        next_states = torch.from_numpy(np.vstack( next_states )).float().to(device)
        dones = torch.from_numpy(np.vstack( dones ).astype(np.uint8)).float().to(device)
        weights = torch.from_numpy(np.vstack( weights ).astype(np.float)).float().to(device)
  
        return (indexes, states, actions, rewards, next_states, dones, weights )

    def __len__(self):
        """Return the current size of internal memory."""
        return len(self.memory)
            

class ReplayBuffer:
    
    """Fixed-size buffer to store experience tuples."""

    def __init__(self, action_size, buffer_size, batch_size, seed ):
        """Initialize a ReplayBuffer object.

        Params
        ======
            action_size (int): dimension of each action
            buffer_size (int): maximum size of buffer
            batch_size (int): size of each training batch
            seed (int): random seed
        """
        self.action_size = action_size
        self.memory = deque(maxlen=buffer_size)  
        self.batch_size = batch_size
        self.experience = namedtuple("Experience", field_names=["state", "action", "reward", "next_state", "done"])
        self.seed = random.seed(seed)
        self.beta = 0.0
            
    def add(self, state, action, reward, next_state, done ):
        """Add a new experience to memory."""
        e = self.experience(state, action, reward, next_state, done )
        self.memory.append(e)    
        
    def sample(self):
        """Randomly sample a batch of experiences from memory."""
        experiences = random.sample(self.memory, k=self.batch_size)

        states = torch.from_numpy(np.vstack([e.state for e in experiences if e is not None])).float().to(device)
        actions = torch.from_numpy(np.vstack([e.action for e in experiences if e is not None])).long().to(device)
        rewards = torch.from_numpy(np.vstack([e.reward for e in experiences if e is not None])).float().to(device)
        next_states = torch.from_numpy(np.vstack([e.next_state for e in experiences if e is not None])).float().to(device)
        dones = torch.from_numpy(np.vstack([e.done for e in experiences if e is not None]).astype(np.uint8)).float().to(device)
  
        update_weights = torch.from_numpy(np.vstack([np.ones(self.batch_size)]).astype(np.float)).float().to(device)
  
        return (np.ones(self.batch_size), states, actions, rewards, next_states, dones, update_weights )

    def __len__(self):
        """Return the current size of internal memory."""
        return len(self.memory)
                                                                        
                                    

        